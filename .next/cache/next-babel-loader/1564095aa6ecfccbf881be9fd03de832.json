{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useCallback, useEffect } from 'react';\nimport { TextField, Layout, Form, FormLayout } from '@shopify/polaris';\nimport _ from 'lodash';\n\nvar Question = function Question() {\n  var _useState = useState([1]),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var _useState2 = useState(''),\n      question = _useState2[0],\n      setQuestion = _useState2[1];\n\n  var _useState3 = useState(1),\n      numOptions = _useState3[0],\n      setNumOptions = _useState3[1];\n\n  var handleNumOptions = useCallback(function (option) {\n    if (option > 4) {\n      setNumOptions(4), [];\n    } else {\n      setNumOptions(option), [];\n    }\n  });\n  var handleQuestion = useCallback(function (question) {\n    return setQuestion(question);\n  }, []);\n  var handleSubmit = useCallback(function (_event) {\n    return setUrl('');\n  }, []);\n\n  var displayOptions = function displayOptions(opts) {\n    if (!opts) {\n      return __jsx(\"div\", null, \"Loading...\");\n    }\n\n    return opts.map(function (item) {\n      return __jsx(TextField, {\n        label: \"Option \".concat(item),\n        type: \"text\",\n        value: '',\n        onChange: function onChange(event) {\n          return console.log(event);\n        },\n        key: item\n      });\n    });\n  };\n\n  return __jsx(Fragment, null, __jsx(Form, {\n    noValidate: true,\n    onSubmit: handleSubmit\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: question,\n    onChange: handleQuestion,\n    label: \"Question\",\n    type: \"text\",\n    placeholder: \"Which of the following do you prefer, etc\"\n  }), __jsx(TextField, {\n    label: \"Number of options\",\n    type: \"number\",\n    maxLength: \"1\",\n    max: \"4\",\n    min: \"1\",\n    value: numOptions,\n    onChange: handleNumOptions\n  }), displayOptions(_.range(1, _parseInt(numOptions, 10) + 1)))));\n};\n\nexport default Question;","map":{"version":3,"sources":["C:/Users/teren/Desktop/item_match/components/Question.js"],"names":["React","Fragment","useState","useCallback","useEffect","TextField","Layout","Form","FormLayout","_","Question","options","setOptions","question","setQuestion","numOptions","setNumOptions","handleNumOptions","option","handleQuestion","handleSubmit","_event","setUrl","displayOptions","opts","map","item","event","console","log","range"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,UAAlC,QAAoD,kBAApD;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBAEWR,QAAQ,CAAC,CAAC,CAAD,CAAD,CAFnB;AAAA,MAEZS,OAFY;AAAA,MAEHC,UAFG;;AAAA,mBAGaV,QAAQ,CAAC,EAAD,CAHrB;AAAA,MAGZW,QAHY;AAAA,MAGFC,WAHE;;AAAA,mBAIiBZ,QAAQ,CAAC,CAAD,CAJzB;AAAA,MAIZa,UAJY;AAAA,MAIAC,aAJA;;AAMnB,MAAMC,gBAAgB,GAAGd,WAAW,CAAC,UAACe,MAAD,EAAY;AAC7C,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACZF,MAAAA,aAAa,CAAC,CAAD,CAAb,EAAkB,EAAlB;AACH,KAFD,MAEO;AACHA,MAAAA,aAAa,CAACE,MAAD,CAAb,EAAuB,EAAvB;AACH;AACJ,GANmC,CAApC;AAOA,MAAMC,cAAc,GAAGhB,WAAW,CAAC,UAACU,QAAD;AAAA,WAAcC,WAAW,CAACD,QAAD,CAAzB;AAAA,GAAD,EAAsC,EAAtC,CAAlC;AACA,MAAMO,YAAY,GAAGjB,WAAW,CAAC,UAACkB,MAAD;AAAA,WAAYC,MAAM,CAAC,EAAD,CAAlB;AAAA,GAAD,EAAyB,EAAzB,CAAhC;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC7B,QAAI,CAACA,IAAL,EAAW;AACP,aAAO,gCAAP;AACH;;AAED,WACIA,IAAI,CAACC,GAAL,CAAS,UAAAC,IAAI,EAAI;AACb,aACI,MAAC,SAAD;AACI,QAAA,KAAK,mBAAYA,IAAZ,CADT;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,KAAK,EAAE,EAHX;AAII,QAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,iBAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;AAAA,SAJd;AAKI,QAAA,GAAG,EAAED;AALT,QADJ;AASH,KAVD,CADJ;AAYH,GAjBD;;AAmBA,SACI,MAAC,QAAD,QACI,MAAC,IAAD;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,QAAQ,EAAEN;AAA3B,KACI,MAAC,UAAD,QACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAEP,QADX;AAEI,IAAA,QAAQ,EAAEM,cAFd;AAGI,IAAA,KAAK,EAAC,UAHV;AAII,IAAA,IAAI,EAAC,MAJT;AAKI,IAAA,WAAW,EAAC;AALhB,IADJ,EAQI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,mBADV;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,SAAS,EAAC,GAHd;AAII,IAAA,GAAG,EAAC,GAJR;AAKI,IAAA,GAAG,EAAC,GALR;AAMI,IAAA,KAAK,EAAEJ,UANX;AAOI,IAAA,QAAQ,EAAEE;AAPd,IARJ,EAkBKM,cAAc,CAACd,CAAC,CAACqB,KAAF,CAAQ,CAAR,EAAW,UAASf,UAAT,EAAqB,EAArB,IAA2B,CAAtC,CAAD,CAlBnB,CADJ,CADJ,CADJ;AA2BH,CA/DD;;AAiEA,eAAeL,QAAf","sourcesContent":["import React, { Fragment, useState, useCallback, useEffect } from 'react'\r\nimport { TextField, Layout, Form, FormLayout } from '@shopify/polaris';\r\nimport _ from 'lodash';\r\n\r\nconst Question = () => {\r\n\r\n    const [options, setOptions] = useState([1]);\r\n    const [question, setQuestion] = useState('');\r\n    const [numOptions, setNumOptions] = useState(1);\r\n\r\n    const handleNumOptions = useCallback((option) => {\r\n        if (option > 4) {\r\n            setNumOptions(4), []\r\n        } else {\r\n            setNumOptions(option), []\r\n        }\r\n    });\r\n    const handleQuestion = useCallback((question) => setQuestion(question), []);\r\n    const handleSubmit = useCallback((_event) => setUrl(''), []);\r\n\r\n\r\n    const displayOptions = (opts) => {\r\n        if (!opts) {\r\n            return <div>Loading...</div>\r\n        }\r\n\r\n        return (\r\n            opts.map(item => {\r\n                return (\r\n                    <TextField\r\n                        label={`Option ${item}`}\r\n                        type=\"text\"\r\n                        value={''}\r\n                        onChange={(event) => console.log(event)}\r\n                        key={item}\r\n                    />\r\n                )\r\n            }))\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n                <FormLayout>\r\n                    <TextField\r\n                        value={question}\r\n                        onChange={handleQuestion}\r\n                        label=\"Question\"\r\n                        type=\"text\"\r\n                        placeholder=\"Which of the following do you prefer, etc\"\r\n                    />\r\n                    <TextField\r\n                        label=\"Number of options\"\r\n                        type=\"number\"\r\n                        maxLength=\"1\"\r\n                        max=\"4\"\r\n                        min=\"1\"\r\n                        value={numOptions}\r\n                        onChange={handleNumOptions}\r\n\r\n                    />\r\n                    {displayOptions(_.range(1, parseInt(numOptions, 10) + 1))}\r\n                </FormLayout>\r\n            </Form>\r\n\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}